name: Build binaries

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: squirrel-lsp-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: squirrel-lsp-linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: squirrel-lsp-windows-x86_64
            rustflags: -C target-feature=+crt-static
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact: squirrel-lsp-windows-aarch64
            rustflags: -C target-feature=+crt-static
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: squirrel-lsp-macos-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: squirrel-lsp-macos-x86_64

    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Set up Rust ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921 # master commit
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install aarch64 cross toolchain (Linux)
        if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build release
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact (Windows)
        if: startsWith(matrix.os, 'windows')
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.artifact }}
          path: target/${{ matrix.target }}/release/squirrel-lsp.exe

      - name: Upload artifact (Unix)
        if: ${{ !startsWith(matrix.os, 'windows') }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.artifact }}
          path: target/${{ matrix.target }}/release/squirrel-lsp

  package-vsix:
    name: package vscode extension (vsix)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: "20"

      - name: Download built artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: artifacts

      - name: Arrange binaries into extension bin/
        run: |
          set -eux
          mkdir -p vscode-extension/bin/darwin-x64 \
                   vscode-extension/bin/darwin-arm64 \
                   vscode-extension/bin/linux-x64 \
                   vscode-extension/bin/linux-arm64 \
                   vscode-extension/bin/win32-x64 \
                   vscode-extension/bin/win32-arm64

          # Copy Unix binaries
          if [ -f artifacts/squirrel-lsp-macos-x86_64/squirrel-lsp ]; then
            cp artifacts/squirrel-lsp-macos-x86_64/squirrel-lsp vscode-extension/bin/darwin-x64/squirrel-lsp
            chmod +x vscode-extension/bin/darwin-x64/squirrel-lsp
          fi
          if [ -f artifacts/squirrel-lsp-macos-aarch64/squirrel-lsp ]; then
            cp artifacts/squirrel-lsp-macos-aarch64/squirrel-lsp vscode-extension/bin/darwin-arm64/squirrel-lsp
            chmod +x vscode-extension/bin/darwin-arm64/squirrel-lsp
          fi
          if [ -f artifacts/squirrel-lsp-linux-x86_64/squirrel-lsp ]; then
            cp artifacts/squirrel-lsp-linux-x86_64/squirrel-lsp vscode-extension/bin/linux-x64/squirrel-lsp
            chmod +x vscode-extension/bin/linux-x64/squirrel-lsp
          fi
          if [ -f artifacts/squirrel-lsp-linux-aarch64/squirrel-lsp ]; then
            cp artifacts/squirrel-lsp-linux-aarch64/squirrel-lsp vscode-extension/bin/linux-arm64/squirrel-lsp
            chmod +x vscode-extension/bin/linux-arm64/squirrel-lsp
          fi

          # Copy Windows binaries
          if [ -f artifacts/squirrel-lsp-windows-x86_64/squirrel-lsp.exe ]; then
            cp artifacts/squirrel-lsp-windows-x86_64/squirrel-lsp.exe vscode-extension/bin/win32-x64/squirrel-lsp.exe
          fi
          if [ -f artifacts/squirrel-lsp-windows-aarch64/squirrel-lsp.exe ]; then
            cp artifacts/squirrel-lsp-windows-aarch64/squirrel-lsp.exe vscode-extension/bin/win32-arm64/squirrel-lsp.exe
          fi

      - name: Prepare release assets directory
        run: |
          set -eux
          mkdir -p release-assets
          if [ -f artifacts/squirrel-lsp-linux-x86_64/squirrel-lsp ]; then
            cp artifacts/squirrel-lsp-linux-x86_64/squirrel-lsp release-assets/squirrel-lsp-linux-x86_64
          fi
          if [ -f artifacts/squirrel-lsp-linux-aarch64/squirrel-lsp ]; then
            cp artifacts/squirrel-lsp-linux-aarch64/squirrel-lsp release-assets/squirrel-lsp-linux-aarch64
          fi
          if [ -f artifacts/squirrel-lsp-macos-x86_64/squirrel-lsp ]; then
            cp artifacts/squirrel-lsp-macos-x86_64/squirrel-lsp release-assets/squirrel-lsp-macos-x86_64
          fi
          if [ -f artifacts/squirrel-lsp-macos-aarch64/squirrel-lsp ]; then
            cp artifacts/squirrel-lsp-macos-aarch64/squirrel-lsp release-assets/squirrel-lsp-macos-aarch64
          fi
          if [ -f artifacts/squirrel-lsp-windows-x86_64/squirrel-lsp.exe ]; then
            cp artifacts/squirrel-lsp-windows-x86_64/squirrel-lsp.exe release-assets/squirrel-lsp-windows-x86_64.exe
          fi
          if [ -f artifacts/squirrel-lsp-windows-aarch64/squirrel-lsp.exe ]; then
            cp artifacts/squirrel-lsp-windows-aarch64/squirrel-lsp.exe release-assets/squirrel-lsp-windows-aarch64.exe
          fi

      - name: Install dependencies
        working-directory: vscode-extension
        run: npm ci

      - name: Compile extension
        working-directory: vscode-extension
        run: npm run -s compile

      - name: Package VSIX
        working-directory: vscode-extension
        run: npm run -s package

      - name: Collect VSIX into release assets and checksums
        run: |
          set -eux
          cp vscode-extension/*.vsix release-assets/
          (cd release-assets && for f in *; do sha256sum "$f" > "$f.sha256"; done)

      - name: Create GitHub Release and upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          TAG="${GITHUB_REF_NAME}"
          if gh release view "$TAG" >/dev/null 2>&1; then
            gh release upload "$TAG" release-assets/** --clobber
          else
            gh release create "$TAG" release-assets/** --generate-notes --title "$TAG"
          fi

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: squirrel-lsp-vscode-vsix
          path: vscode-extension/*.vsix
